{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Securing your cluster system mostly centers around two concepts: making sure you trust your peers and systems which are able to call into the cluster,"},{"type":"text","text":" "},{"type":"text","text":"and ensuring that messages exchanged are of trusted types."}]},{"anchor":"Transport-Security-TLS","level":2,"type":"heading","text":"Transport Security: TLS"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"strong","inlineContent":[{"type":"text","text":"TODO:"}]},{"type":"text","text":" explain configuring TLS"}]}],"type":"aside","name":"Note"},{"type":"codeListing","syntax":"swift","code":["import DistributedActors","import NIOSSL"]},{"type":"codeListing","syntax":"swift","code":["let testCert1 = \"<load the CERTIFICATE from somewhere>\"","let testKey1 = \"<load the PRIVATE KEY from somewhere>\"","","let testCert2 = \"<load the CERTIFICATE from somewhere>\"","let testKey2 = \"<load the PRIVATE KEY from somewhere>\"","","let testCertificate2 = try NIOSSLCertificate(bytes: [UInt8](testCert2.utf8), format: .pem)","let testCertificateSource2: NIOSSLCertificateSource = .certificate(testCertificate2)","let testKeySource2: NIOSSLPrivateKeySource = .privateKey(try NIOSSLPrivateKey(bytes: [UInt8](testKey2.utf8), format: .pem))"]},{"type":"codeListing","syntax":"swift","code":["let testCertificate1 = try NIOSSLCertificate(bytes: [UInt8](testCert1.utf8), format: .pem)","let testCertificateSource1: NIOSSLCertificateSource = .certificate(testCertificate1)","let testKeySource1: NIOSSLPrivateKeySource = .privateKey(try NIOSSLPrivateKey(bytes: [UInt8](testKey1.utf8), format: .pem))","","let tlsExampleSystem = await ClusterSystem(\"tls-example\") { settings in","    settings.node.host = \"...\"","    settings.tls = TLSConfiguration.makeServerConfiguration(","        certificateChain: [testCertificateSource1],","        privateKey: testKeySource1","    )","    settings.tls?.certificateVerification = .fullVerification","    settings.tls?.trustRoots = .certificates([testCertificate2])","}"]},{"anchor":"Message-Security","level":2,"type":"heading","text":"Message Security"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other layer of security is about messages which are allowed to be sent to actors."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In general, you can audit your distributed API surface by searching your codebase for "},{"type":"codeVoice","code":"distributed func"},{"type":"text","text":" and "},{"type":"codeVoice","code":"distributed var"},{"type":"text","text":", and verify the types involved in those calls."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The cluster also requires all types invokved in remote calls to conform to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" and will utilize "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" types to deserialize them. As such, the typical attack of “accidentally deserialize an arbitrary sub-class of a type” is prevented by the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type itself."}]},{"anchor":"Trusting-message-types","level":3,"type":"heading","text":"Trusting message types"},{"anchor":"Trusting-error-types","level":3,"type":"heading","text":"Trusting error types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Error types may be transported back to a remote caller if they are trusted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, errors are NOT serialized even if they conform to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" and one has to explicitly opt errors into shipping them back to callers, by adding the trusted types to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/RemoteCallSettings\/codableErrorAllowance"},{"type":"text","text":" configuration setting:"}]},{"type":"codeListing","syntax":"swift","code":["_ = await ClusterSystem(\"AllowedRemoteErrors\") { settings in ","    settings.remoteCall.codableErrorAllowance = .custom(allowedTypes: [","        GreeterCodableError.self, ","        AnotherGreeterCodableError.self,","    ])","}","","struct GreeterCodableError: Error, Codable {}","struct AnotherGreeterCodableError: Error, Codable {}"]},{"anchor":"Topics","level":3,"type":"heading","text":"Topics"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Serialization\/Settings"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/tls"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/tlsPassphraseCallback"}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/distributedactors\/security"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Security","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Configuring security aspects of your cluster system."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Security","role":"article","modules":[{"name":"DistributedActors"}]},"hierarchy":{"paths":[["doc:\/\/DistributedActors\/documentation\/DistributedActors"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/DistributedActors\/documentation\/DistributedActors\/Introduction","doc:\/\/DistributedActors\/documentation\/DistributedActors\/Clustering","doc:\/\/DistributedActors\/documentation\/DistributedActors\/Lifecycle","doc:\/\/DistributedActors\/documentation\/DistributedActors\/Receptionist","doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSingleton","doc:\/\/DistributedActors\/documentation\/DistributedActors\/Observability"],"generated":true}],"references":{"doc://DistributedActors/documentation/DistributedActors/ClusterSystemSettings/RemoteCallSettings/codableErrorAllowance":{"role":"symbol","title":"codableErrorAllowance","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"codableErrorAllowance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ClusterSystemSettings","preciseIdentifier":"s:17DistributedActors21ClusterSystemSettingsV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"RemoteCallSettings","preciseIdentifier":"s:17DistributedActors21ClusterSystemSettingsV010RemoteCallE0V"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CodableErrorAllowanceSettings","preciseIdentifier":"s:17DistributedActors21ClusterSystemSettingsV010RemoteCallE0V021CodableErrorAllowanceE0V"}],"abstract":[],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/RemoteCallSettings\/codableErrorAllowance","kind":"symbol","type":"topic","url":"\/documentation\/distributedactors\/clustersystemsettings\/remotecallsettings\/codableerrorallowance"},"doc://DistributedActors/documentation/DistributedActors/Serialization/Settings":{"role":"symbol","title":"Serialization.Settings","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Settings"}],"abstract":[],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Serialization\/Settings","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Settings"}],"url":"\/documentation\/distributedactors\/serialization\/settings"},"doc://DistributedActors/documentation/DistributedActors/ClusterSystemSettings/tlsPassphraseCallback":{"role":"symbol","title":"tlsPassphraseCallback","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"tlsPassphraseCallback"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOSSLPassphraseCallback","preciseIdentifier":"s:6NIOSSL24NIOSSLPassphraseCallbacka"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"]>?"}],"abstract":[{"type":"text","text":"Callback invoked when a passphrase is required for TLS."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/tlsPassphraseCallback","kind":"symbol","type":"topic","url":"\/documentation\/distributedactors\/clustersystemsettings\/tlspassphrasecallback"},"doc://DistributedActors/documentation/DistributedActors":{"role":"collection","title":"DistributedActors","abstract":[{"type":"text","text":"A peer-to-peer cluster actor system implementation for Swift."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors","kind":"symbol","type":"topic","url":"\/documentation\/distributedactors"},"doc://DistributedActors/documentation/DistributedActors/ClusterSystemSettings/tls":{"role":"symbol","title":"tls","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"tls"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TLSConfiguration","preciseIdentifier":"s:6NIOSSL16TLSConfigurationV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"If set, all communication with other nodes will be secured using TLS."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSystemSettings\/tls","kind":"symbol","type":"topic","url":"\/documentation\/distributedactors\/clustersystemsettings\/tls"},"doc://DistributedActors/documentation/DistributedActors/Receptionist":{"role":"article","title":"Receptionist","abstract":[{"type":"text","text":"Discovering actors is an important aspect of distributed programming, as it is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"the"}]},{"type":"text","text":" primary way we can discover actors on other nodes,"},{"type":"text","text":" "},{"type":"text","text":"and communicate with them."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Receptionist","kind":"article","type":"topic","url":"\/documentation\/distributedactors\/receptionist"},"doc://DistributedActors/documentation/DistributedActors/Clustering":{"role":"article","title":"Clustering","abstract":[{"type":"text","text":"Clustering multiple actor system instances into a single Distributed Actor System."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Clustering","kind":"article","type":"topic","url":"\/documentation\/distributedactors\/clustering"},"doc://DistributedActors/documentation/DistributedActors/Observability":{"role":"article","title":"Observability","abstract":[{"type":"text","text":"The cluster system offers a number of built-in observability capabilities about the state of the cluster, as well as distributed actors it manages."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Observability","kind":"article","type":"topic","url":"\/documentation\/distributedactors\/observability"},"doc://DistributedActors/documentation/DistributedActors/Introduction":{"role":"article","title":"Introducing Distributed Actors","abstract":[{"type":"text","text":"A high-level introduction to distributed actor systems."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Introduction","kind":"article","type":"topic","url":"\/documentation\/distributedactors\/introduction"},"doc://DistributedActors/documentation/DistributedActors/Lifecycle":{"role":"article","title":"Lifecycle Monitoring","abstract":[{"type":"text","text":"Monitoring distributed actor lifecycles regardless of their location."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Lifecycle","kind":"article","type":"topic","url":"\/documentation\/distributedactors\/lifecycle"},"doc://DistributedActors/documentation/DistributedActors/Cluster/MemberStatus/up":{"role":"symbol","title":"Cluster.MemberStatus.up","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"up"}],"abstract":[{"type":"text","text":"Describes a node which at some point was known to the leader and moved to "},{"type":"codeVoice","code":".up"},{"type":"text","text":" "},{"type":"text","text":"by whichever strategy it implements for this. Generally, up members are fully ready"},{"type":"text","text":" "},{"type":"text","text":"members of the cluster and are most likely known to many if not all other nodes in the cluster."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Cluster\/MemberStatus\/up","kind":"symbol","type":"topic","url":"\/documentation\/distributedactors\/cluster\/memberstatus\/up"},"doc://DistributedActors/documentation/DistributedActors/ClusterSingleton":{"role":"symbol","title":"ClusterSingleton","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClusterSingleton"}],"abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"cluster singleton"}]},{"type":"text","text":" is a conceptual distributed actor that is guaranteed to have at-most one"},{"type":"text","text":" "},{"type":"text","text":"instance within the cluster system among all of its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/Cluster\/MemberStatus\/up"},{"type":"text","text":" members."}],"identifier":"doc:\/\/DistributedActors\/documentation\/DistributedActors\/ClusterSingleton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ClusterSingleton"}],"url":"\/documentation\/distributedactors\/clustersingleton"}}}